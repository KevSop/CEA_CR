/*
insert license info here
*/
using System;
using Microsoft.Practices.Prism.ViewModel;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class SeatManage : NotificationObject
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _id; 
		private string _number; 
		private string _helpremembercode; 
		private string _areacode; 
		private string _seatcount; 
		private string _privateroomcode; 
		private long _isacceptorder; 
		private string _status; 
		private long _floornumber; 
		private string _seattypecode; 
		private float _minconsumemoney; 
		private long _isvalidate; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public SeatManage()
		{
			_id = 0; 
			_number = null; 
			_helpremembercode = null; 
			_areacode = null; 
			_seatcount = null; 
			_privateroomcode = null; 
			_isacceptorder = 0; 
			_status = null; 
			_floornumber = 0; 
			_seattypecode = null; 
			_minconsumemoney = 0; 
			_isvalidate = 0; 
			_createuser = null; 
			_createtime = new DateTime(); 
			_upduser = null; 
			_updtime = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long Id
		{
			get { return _id; }
            set { _isChanged |= (_id != value); _id = value; RaisePropertyChanged("Id"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Number
		{
			get { return _number; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Number", value, value.ToString());

                _isChanged |= (_number != value); _number = value; RaisePropertyChanged("Number");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string HelpRememberCode
		{
			get { return _helpremembercode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for HelpRememberCode", value, value.ToString());

                _isChanged |= (_helpremembercode != value); _helpremembercode = value; RaisePropertyChanged("HelpRememberCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string AreaCode
		{
			get { return _areacode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for AreaCode", value, value.ToString());

                _isChanged |= (_areacode != value); _areacode = value; RaisePropertyChanged("AreaCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SeatCount
		{
			get { return _seatcount; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for SeatCount", value, value.ToString());

                _isChanged |= (_seatcount != value); _seatcount = value; RaisePropertyChanged("SeatCount");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string PrivateRoomCode
		{
			get { return _privateroomcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for PrivateRoomCode", value, value.ToString());

                _isChanged |= (_privateroomcode != value); _privateroomcode = value; RaisePropertyChanged("PrivateRoomCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsAcceptOrder
		{
			get { return _isacceptorder; }
            set { _isChanged |= (_isacceptorder != value); _isacceptorder = value; RaisePropertyChanged("IsAcceptOrder"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Status
		{
			get { return _status; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                _isChanged |= (_status != value); _status = value; RaisePropertyChanged("Status");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long FloorNumber
		{
			get { return _floornumber; }
            set { _isChanged |= (_floornumber != value); _floornumber = value; RaisePropertyChanged("FloorNumber"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SeatTypeCode
		{
			get { return _seattypecode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for SeatTypeCode", value, value.ToString());

                _isChanged |= (_seattypecode != value); _seattypecode = value; RaisePropertyChanged("SeatTypeCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float MinConsumeMoney
		{
			get { return _minconsumemoney; }
            set { _isChanged |= (_minconsumemoney != value); _minconsumemoney = value; RaisePropertyChanged("MinConsumeMoney"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsValidate
		{
			get { return _isvalidate; }
            set { _isChanged |= (_isvalidate != value); _isvalidate = value; RaisePropertyChanged("IsValidate"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());

                _isChanged |= (_createuser != value); _createuser = value; RaisePropertyChanged("CreateUser");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
            set { _isChanged |= (_createtime != value); _createtime = value; RaisePropertyChanged("CreateTime"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());

                _isChanged |= (_upduser != value); _upduser = value; RaisePropertyChanged("UpdUser"); 
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
            set { _isChanged |= (_updtime != value); _updtime = value; RaisePropertyChanged("UpdTime"); }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
