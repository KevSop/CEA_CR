/*
insert license info here
*/
using System;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PayTypeManage
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _id; 
		private string _code; 
		private string _name; 
		private float _fee; 
		private long _isincome; 
		private long _isreturnfloat; 
		private long _issepcialdis; 
		private long _isneedinputticno; 
		private long _isfixedvalue; 
		private long _isvalidate; 
		private long _isfullpay; 
		private long _iscanusedis; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PayTypeManage()
		{
			_id = 0; 
			_code = null; 
			_name = null; 
			_fee = 0; 
			_isincome = 0; 
			_isreturnfloat = 0; 
			_issepcialdis = 0; 
			_isneedinputticno = 0; 
			_isfixedvalue = 0; 
			_isvalidate = 0; 
			_isfullpay = 0; 
			_iscanusedis = 0; 
			_createuser = null; 
			_createtime = new DateTime(); 
			_upduser = null; 
			_updtime = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long Id
		{
			get { return _id; }
			set { _isChanged |= (_id != value); _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get { return _code; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());
				
				_isChanged |= (_code != value); _code = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				
				_isChanged |= (_name != value); _name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float Fee
		{
			get { return _fee; }
			set { _isChanged |= (_fee != value); _fee = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsIncome
		{
			get { return _isincome; }
			set { _isChanged |= (_isincome != value); _isincome = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsReturnFloat
		{
			get { return _isreturnfloat; }
			set { _isChanged |= (_isreturnfloat != value); _isreturnfloat = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsSepcialDis
		{
			get { return _issepcialdis; }
			set { _isChanged |= (_issepcialdis != value); _issepcialdis = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsNeedInputTicNo
		{
			get { return _isneedinputticno; }
			set { _isChanged |= (_isneedinputticno != value); _isneedinputticno = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsFixedValue
		{
			get { return _isfixedvalue; }
			set { _isChanged |= (_isfixedvalue != value); _isfixedvalue = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsValidate
		{
			get { return _isvalidate; }
			set { _isChanged |= (_isvalidate != value); _isvalidate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsFullPay
		{
			get { return _isfullpay; }
			set { _isChanged |= (_isfullpay != value); _isfullpay = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsCanUseDis
		{
			get { return _iscanusedis; }
			set { _isChanged |= (_iscanusedis != value); _iscanusedis = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());
				
				_isChanged |= (_createuser != value); _createuser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
			set { _isChanged |= (_createtime != value); _createtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());
				
				_isChanged |= (_upduser != value); _upduser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
			set { _isChanged |= (_updtime != value); _updtime = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
