/*
insert license info here
*/
using System;

namespace DataAccess.Domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class EventManage
    {
        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private long _id;
        private string _moduleno_one;
        private string _moduleno_two;
        private string _opermoduleno;
        private string _orderno;
        private string _loginname;
        private string _userno;
        private DateTime _datetime;
        private long _type;
        private string _ip;
        private string _record;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public EventManage()
        {
            _id = 0;
            _moduleno_one = null;
            _moduleno_two = null;
            _opermoduleno = null;
            _orderno = null;
            _loginname = null;
            _userno = null;
            _datetime = new DateTime();
            _type = 0;
            _ip = null;
            _record = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public long Id
        {
            get { return _id; }
            set { _isChanged |= (_id != value); _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ModuleNoOne
        {
            get { return _moduleno_one; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for ModuleNoOne", value, value.ToString());

                _isChanged |= (_moduleno_one != value); _moduleno_one = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ModuleNoTwo
        {
            get { return _moduleno_two; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for ModuleNoTwo", value, value.ToString());

                _isChanged |= (_moduleno_two != value); _moduleno_two = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string OperModuleNo
        {
            get { return _opermoduleno; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for OperModuleNo", value, value.ToString());

                _isChanged |= (_opermoduleno != value); _opermoduleno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string OrderNo
        {
            get { return _orderno; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for OrderNo", value, value.ToString());

                _isChanged |= (_orderno != value); _orderno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string LoginName
        {
            get { return _loginname; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for LoginName", value, value.ToString());

                _isChanged |= (_loginname != value); _loginname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string UserNo
        {
            get { return _userno; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for UserNo", value, value.ToString());

                _isChanged |= (_userno != value); _userno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public DateTime DateTime
        {
            get { return _datetime; }
            set { _isChanged |= (_datetime != value); _datetime = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public long Type
        {
            get { return _type; }
            set { _isChanged |= (_type != value); _type = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Ip
        {
            get { return _ip; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Ip", value, value.ToString());

                _isChanged |= (_ip != value); _ip = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Record
        {
            get { return _record; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Record", value, value.ToString());

                _isChanged |= (_record != value); _record = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            _isDeleted = true;
            _isChanged = true;
        }

        #endregion


    }
}
