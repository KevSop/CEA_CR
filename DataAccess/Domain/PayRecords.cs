/*
insert license info here
*/
using System;

namespace DataAccess.Domain
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class PayRecords
    {
        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private string _mtpid;
        private string _pnrdevid;
        private string _custid;
        private string _xposid;
        private string _md5seed;
        private string _md5key;
        private string _signstate;
        private string _signdate;
        private string _signtime;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public PayRecords()
        {
            _mtpid = null;
            _pnrdevid = null;
            _custid = null;
            _xposid = null;
            _md5seed = null;
            _md5key = null;
            _signstate = null;
            _signdate = null;
            _signtime = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public string MtpId
        {
            get { return _mtpid; }
            set
            {
                if (value != null && value.Length > 12)
                    throw new ArgumentOutOfRangeException("Invalid value for MtpId", value, value.ToString());

                _isChanged |= (_mtpid != value); _mtpid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PnrDevId
        {
            get { return _pnrdevid; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for PnrDevId", value, value.ToString());

                _isChanged |= (_pnrdevid != value); _pnrdevid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CustId
        {
            get { return _custid; }
            set
            {
                if (value != null && value.Length > 16)
                    throw new ArgumentOutOfRangeException("Invalid value for CustId", value, value.ToString());

                _isChanged |= (_custid != value); _custid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string XposId
        {
            get { return _xposid; }
            set
            {
                if (value != null && value.Length > 14)
                    throw new ArgumentOutOfRangeException("Invalid value for XposId", value, value.ToString());

                _isChanged |= (_xposid != value); _xposid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Md5Seed
        {
            get { return _md5seed; }
            set
            {
                if (value != null && value.Length > 32)
                    throw new ArgumentOutOfRangeException("Invalid value for Md5Seed", value, value.ToString());

                _isChanged |= (_md5seed != value); _md5seed = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Md5Key
        {
            get { return _md5key; }
            set
            {
                if (value != null && value.Length > 32)
                    throw new ArgumentOutOfRangeException("Invalid value for Md5Key", value, value.ToString());

                _isChanged |= (_md5key != value); _md5key = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string SignState
        {
            get { return _signstate; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for SignState", value, value.ToString());

                _isChanged |= (_signstate != value); _signstate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string SignDate
        {
            get { return _signdate; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for SignDate", value, value.ToString());

                _isChanged |= (_signdate != value); _signdate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string SignTime
        {
            get { return _signtime; }
            set
            {
                if (value != null && value.Length > 6)
                    throw new ArgumentOutOfRangeException("Invalid value for SignTime", value, value.ToString());

                _isChanged |= (_signtime != value); _signtime = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            _isDeleted = true;
            _isChanged = true;
        }

        #endregion


    }
}
