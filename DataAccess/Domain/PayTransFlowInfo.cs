/*
insert license info here
*/
using System;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PayTransFlowInfo
	{
        #region Private Members
        private bool _isChanged;
        private bool _isDeleted;
        private string _acctseqid;
        private string _posmerid;
        private string _posmername;
        private string _payordid;
        private double _payamt;
        private string _pnrdevid;
        private string _mername;
        private string _terminalno;
        private string _cardno;
        private string _issbank;
        private string _acqorg;
        private string _expdate;
        private string _transtype;
        private string _oldpayorderid;
        private string _batchid;
        private string _createdate;
        private string _createtime;
        private string _operid;
        private string _transstatus;
        private string _failurereason;
        private string _authno;
        private string _refno;
        private string _voucherno;
        private string _reference;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public PayTransFlowInfo()
        {
            _acctseqid = null;
            _posmerid = null;
            _posmername = null;
            _payordid = null;
            _payamt = 0.0;
            _pnrdevid = null;
            _mername = null;
            _terminalno = null;
            _cardno = null;
            _issbank = null;
            _acqorg = null;
            _expdate = null;
            _transtype = null;
            _oldpayorderid = null;
            _batchid = null;
            _createdate = null;
            _createtime = null;
            _operid = null;
            _transstatus = null;
            _failurereason = null;
            _authno = null;
            _refno = null;
            _voucherno = null;
            _reference = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>		
        public string AcctSeqId
        {
            get { return _acctseqid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for AcctSeqId", value, value.ToString());

                _isChanged |= (_acctseqid != value); _acctseqid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PosMerId
        {
            get { return _posmerid; }
            set
            {
                if (value != null && value.Length > 16)
                    throw new ArgumentOutOfRangeException("Invalid value for PosMerId", value, value.ToString());

                _isChanged |= (_posmerid != value); _posmerid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PosMerName
        {
            get { return _posmername; }
            set
            {
                if (value != null && value.Length > 32)
                    throw new ArgumentOutOfRangeException("Invalid value for PosMerName", value, value.ToString());

                _isChanged |= (_posmername != value); _posmername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PayOrdId
        {
            get { return _payordid; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for PayOrdId", value, value.ToString());

                _isChanged |= (_payordid != value); _payordid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public double PayAmt
        {
            get { return _payamt; }
            set { _isChanged |= (_payamt != value); _payamt = value; }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string PnrDevId
        {
            get { return _pnrdevid; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for PnrDevId", value, value.ToString());

                _isChanged |= (_pnrdevid != value); _pnrdevid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string MerName
        {
            get { return _mername; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for MerName", value, value.ToString());

                _isChanged |= (_mername != value); _mername = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TerminalNo
        {
            get { return _terminalno; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for TerminalNo", value, value.ToString());

                _isChanged |= (_terminalno != value); _terminalno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CardNo
        {
            get { return _cardno; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for CardNo", value, value.ToString());

                _isChanged |= (_cardno != value); _cardno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string IssBank
        {
            get { return _issbank; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for IssBank", value, value.ToString());

                _isChanged |= (_issbank != value); _issbank = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AcqOrg
        {
            get { return _acqorg; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for AcqOrg", value, value.ToString());

                _isChanged |= (_acqorg != value); _acqorg = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string ExpDate
        {
            get { return _expdate; }
            set
            {
                if (value != null && value.Length > 4)
                    throw new ArgumentOutOfRangeException("Invalid value for ExpDate", value, value.ToString());

                _isChanged |= (_expdate != value); _expdate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TransType
        {
            get { return _transtype; }
            set
            {
                if (value != null && value.Length > 2)
                    throw new ArgumentOutOfRangeException("Invalid value for TransType", value, value.ToString());

                _isChanged |= (_transtype != value); _transtype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string OldPayOrderId
        {
            get { return _oldpayorderid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for OldPayOrderId", value, value.ToString());

                _isChanged |= (_oldpayorderid != value); _oldpayorderid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string BatchId
        {
            get { return _batchid; }
            set
            {
                if (value != null && value.Length > 6)
                    throw new ArgumentOutOfRangeException("Invalid value for BatchId", value, value.ToString());

                _isChanged |= (_batchid != value); _batchid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateDate
        {
            get { return _createdate; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateDate", value, value.ToString());

                _isChanged |= (_createdate != value); _createdate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string CreateTime
        {
            get { return _createtime; }
            set
            {
                if (value != null && value.Length > 6)
                    throw new ArgumentOutOfRangeException("Invalid value for CreateTime", value, value.ToString());

                _isChanged |= (_createtime != value); _createtime = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string OperId
        {
            get { return _operid; }
            set
            {
                if (value != null && value.Length > 6)
                    throw new ArgumentOutOfRangeException("Invalid value for OperId", value, value.ToString());

                _isChanged |= (_operid != value); _operid = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string TransStatus
        {
            get { return _transstatus; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for TransStatus", value, value.ToString());

                _isChanged |= (_transstatus != value); _transstatus = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string FailureReason
        {
            get { return _failurereason; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for FailureReason", value, value.ToString());

                _isChanged |= (_failurereason != value); _failurereason = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string AuthNo
        {
            get { return _authno; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for AuthNo", value, value.ToString());

                _isChanged |= (_authno != value); _authno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string RefNo
        {
            get { return _refno; }
            set
            {
                if (value != null && value.Length > 12)
                    throw new ArgumentOutOfRangeException("Invalid value for RefNo", value, value.ToString());

                _isChanged |= (_refno != value); _refno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string VoucherNo
        {
            get { return _voucherno; }
            set
            {
                if (value != null && value.Length > 8)
                    throw new ArgumentOutOfRangeException("Invalid value for VoucherNo", value, value.ToString());

                _isChanged |= (_voucherno != value); _voucherno = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>		
        public string Reference
        {
            get { return _reference; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Reference", value, value.ToString());

                _isChanged |= (_reference != value); _reference = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return _isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            _isDeleted = true;
            _isChanged = true;
        }

        #endregion
		
		
	}
}
