/*
insert license info here
*/
using System;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class OrderManage
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _com_id; 
		private string _orderno; 
		private string _consumerno; 
		private string _orderdate; 
		private string _reachtime; 
		private string _keeptime; 
		private string _receivetime; 
		private long _peoplecount; 
		private string _seatnumber; 
		private string _orderstatus; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 
		private string _remark; 
		private string _ordersno; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public OrderManage()
		{
			_com_id = 0; 
			_orderno = null; 
			_consumerno = null; 
			_orderdate = null; 
			_reachtime = null; 
			_keeptime = null; 
			_receivetime = null; 
			_peoplecount = 0; 
			_seatnumber = null; 
			_orderstatus = null; 
			_createuser = null; 
			_createtime = new DateTime(); 
			_upduser = null; 
			_updtime = new DateTime(); 
			_remark = null; 
			_ordersno = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long ComId
		{
			get { return _com_id; }
			set { _isChanged |= (_com_id != value); _com_id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OrderNo
		{
			get { return _orderno; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for OrderNo", value, value.ToString());
				
				_isChanged |= (_orderno != value); _orderno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ConsumerNo
		{
			get { return _consumerno; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for ConsumerNo", value, value.ToString());
				
				_isChanged |= (_consumerno != value); _consumerno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OrderDate
		{
			get { return _orderdate; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for OrderDate", value, value.ToString());
				
				_isChanged |= (_orderdate != value); _orderdate = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ReachTime
		{
			get { return _reachtime; }
			set	
			{
				if( value!= null && value.Length > 5)
					throw new ArgumentOutOfRangeException("Invalid value for ReachTime", value, value.ToString());
				
				_isChanged |= (_reachtime != value); _reachtime = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string KeepTime
		{
			get { return _keeptime; }
			set	
			{
				if( value!= null && value.Length > 5)
					throw new ArgumentOutOfRangeException("Invalid value for KeepTime", value, value.ToString());
				
				_isChanged |= (_keeptime != value); _keeptime = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string ReceiveTime
		{
			get { return _receivetime; }
			set	
			{
				if( value!= null && value.Length > 5)
					throw new ArgumentOutOfRangeException("Invalid value for ReceiveTime", value, value.ToString());
				
				_isChanged |= (_receivetime != value); _receivetime = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long PeopleCount
		{
			get { return _peoplecount; }
			set { _isChanged |= (_peoplecount != value); _peoplecount = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SeatNumber
		{
			get { return _seatnumber; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for SeatNumber", value, value.ToString());
				
				_isChanged |= (_seatnumber != value); _seatnumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OrderStatus
		{
			get { return _orderstatus; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for OrderStatus", value, value.ToString());
				
				_isChanged |= (_orderstatus != value); _orderstatus = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());
				
				_isChanged |= (_createuser != value); _createuser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
			set { _isChanged |= (_createtime != value); _createtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());
				
				_isChanged |= (_upduser != value); _upduser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
			set { _isChanged |= (_updtime != value); _updtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Remark
		{
			get { return _remark; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				_isChanged |= (_remark != value); _remark = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string OrdersNo
		{
			get { return _ordersno; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for OrdersNo", value, value.ToString());
				
				_isChanged |= (_ordersno != value); _ordersno = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
