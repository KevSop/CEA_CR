/*
insert license info here
*/
using System;
using Microsoft.Practices.Prism.ViewModel;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class UserManage : NotificationObject
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _id; 
		private string _userno; 
		private string _loginname; 
		private string _cname; 
		private string _loginpwd; 
		private long _post; 
		private string _partment; 
		private long _status; 
		private string _workarea; 
		private string _worktype; 
		private string _tel; 
		private string _email; 
		private string _idcard;
        private DateTime _birthday;
		private long _sex; 
		private byte[] _photo; 
		private string _country; 
		private string _province; 
		private string _city; 
		private string _county; 
		private string _street; 
		private long _issupperuser; 
		private string _refundpwd; 
		private DateTime _lastlogintime; 
		private string _lastip; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public UserManage()
		{
			_id = 0; 
			_userno = null; 
			_loginname = null; 
			_cname = null; 
			_loginpwd = null; 
			_post = -1; 
			_partment = "-1"; 
			_status = 1; 
			_workarea = "-1"; 
			_worktype = "-1"; 
			_tel = null; 
			_email = null; 
			_idcard = null; 
			_birthday = DateTime.Now; 
			_sex = 0; 
			_photo = new byte[]{}; 
			_country = null; 
			_province = null; 
			_city = null; 
			_county = null; 
			_street = null; 
			_issupperuser = 0; 
			_refundpwd = null; 
			_lastlogintime = new DateTime(); 
			_lastip = null; 
			_createuser = null;
            _createtime = DateTime.Now; 
			_upduser = null;
            _updtime = DateTime.Now; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long Id
		{
			get { return _id; }
            set { _isChanged |= (_id != value); _id = value; RaisePropertyChanged("Id"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UserNo
		{
			get { return _userno; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UserNo", value, value.ToString());

                _isChanged |= (_userno != value); _userno = value; RaisePropertyChanged("UserNo");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LoginName
		{
			get { return _loginname; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for LoginName", value, value.ToString());

                _isChanged |= (_loginname != value); _loginname = value; RaisePropertyChanged("LoginName");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Cname
		{
			get { return _cname; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Cname", value, value.ToString());

                _isChanged |= (_cname != value); _cname = value; RaisePropertyChanged("Cname");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LoginPwd
		{
			get { return _loginpwd; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for LoginPwd", value, value.ToString());

                _isChanged |= (_loginpwd != value); _loginpwd = value; RaisePropertyChanged("LoginPwd");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long Post
		{
			get { return _post; }
            set { _isChanged |= (_post != value); _post = value; RaisePropertyChanged("Post"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Partment
		{
			get { return _partment; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Partment", value, value.ToString());

                _isChanged |= (_partment != value); _partment = value; RaisePropertyChanged("Partment");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long Status
		{
			get { return _status; }
            set { _isChanged |= (_status != value); _status = value; RaisePropertyChanged("Status"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string WorkArea
		{
			get { return _workarea; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for WorkArea", value, value.ToString());

                _isChanged |= (_workarea != value); _workarea = value; RaisePropertyChanged("WorkArea");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string WorkType
		{
			get { return _worktype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for WorkType", value, value.ToString());

                _isChanged |= (_worktype != value); _worktype = value; RaisePropertyChanged("WorkType");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Tel
		{
			get { return _tel; }
			set	
			{
				if( value!= null && value.Length > 11)
					throw new ArgumentOutOfRangeException("Invalid value for Tel", value, value.ToString());

                _isChanged |= (_tel != value); _tel = value; RaisePropertyChanged("Tel");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Email
		{
			get { return _email; }
			set	
			{
				if( value!= null && value.Length > 25)
					throw new ArgumentOutOfRangeException("Invalid value for Email", value, value.ToString());

                _isChanged |= (_email != value); _email = value; RaisePropertyChanged("Email");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string IdCard
		{
			get { return _idcard; }
			set	
			{
				if( value!= null && value.Length > 18)
					throw new ArgumentOutOfRangeException("Invalid value for IdCard", value, value.ToString());

                _isChanged |= (_idcard != value); _idcard = value; RaisePropertyChanged("IdCard");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime Birthday
		{
			get { return _birthday; }
            set { _isChanged |= (_birthday != value); _birthday = value; RaisePropertyChanged("Birthday"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long Sex
		{
			get { return _sex; }
            set { _isChanged |= (_sex != value); _sex = value; RaisePropertyChanged("Sex"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public byte[] Photo
		{
			get { return _photo; }
            set { _isChanged |= (_photo != value); _photo = value; RaisePropertyChanged("Photo"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Country
		{
			get { return _country; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Country", value, value.ToString());

                _isChanged |= (_country != value); _country = value; RaisePropertyChanged("Country");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Province
		{
			get { return _province; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Province", value, value.ToString());

                _isChanged |= (_province != value); _province = value; RaisePropertyChanged("Province");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string City
		{
			get { return _city; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for City", value, value.ToString());

                _isChanged |= (_city != value); _city = value; RaisePropertyChanged("City");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string County
		{
			get { return _county; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for County", value, value.ToString());

                _isChanged |= (_county != value); _county = value; RaisePropertyChanged("County");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Street
		{
			get { return _street; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Street", value, value.ToString());

                _isChanged |= (_street != value); _street = value; RaisePropertyChanged("Street");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsSupperUser
		{
			get { return _issupperuser; }
            set { _isChanged |= (_issupperuser != value); _issupperuser = value; RaisePropertyChanged("IsSupperUser"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string RefundPwd
		{
			get { return _refundpwd; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for RefundPwd", value, value.ToString());

                _isChanged |= (_refundpwd != value); _refundpwd = value; RaisePropertyChanged("RefundPwd");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime LastLoginTime
		{
			get { return _lastlogintime; }
            set { _isChanged |= (_lastlogintime != value); _lastlogintime = value; RaisePropertyChanged("LastLoginTime"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string LastIp
		{
			get { return _lastip; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for LastIp", value, value.ToString());

                _isChanged |= (_lastip != value); _lastip = value; RaisePropertyChanged("LastIp");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());

                _isChanged |= (_createuser != value); _createuser = value; RaisePropertyChanged("CreateUser");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
            set { _isChanged |= (_createtime != value); _createtime = value; RaisePropertyChanged("CreateTime"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());

                _isChanged |= (_upduser != value); _upduser = value; RaisePropertyChanged("UpdUser");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
            set { _isChanged |= (_updtime != value); _updtime = value; RaisePropertyChanged("UpdTime"); }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
