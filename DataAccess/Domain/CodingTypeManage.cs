/*
insert license info here
*/
using System;
using Microsoft.Practices.Prism.ViewModel;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class CodingTypeManage : NotificationObject
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _id; 
		private string _code; 
		private string _name; 
		private string _firstletter; 
		private long _iscontaindate; 
		private long _length; 
		private string _startvalue; 
		private string _currentvalue; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public CodingTypeManage()
		{
			_id = 0; 
			_code = null; 
			_name = null; 
			_firstletter = null; 
			_iscontaindate = 0; 
			_length = 0; 
			_startvalue = null; 
			_currentvalue = null; 
			_createuser = null; 
			_createtime = new DateTime(); 
			_upduser = null; 
			_updtime = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long Id
		{
			get { return _id; }
            set { _isChanged |= (_id != value); _id = value; RaisePropertyChanged("Id"); }
		}
       
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get { return _code; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());

                _isChanged |= (_code != value); _code = value; RaisePropertyChanged("Code");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get { return _name; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());

                _isChanged |= (_name != value); _name = value; RaisePropertyChanged("Name");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string FirstLetter
		{
			get { return _firstletter; }
			set	
			{
				if( value!= null && value.Length > 5)
					throw new ArgumentOutOfRangeException("Invalid value for FirstLetter", value, value.ToString());

                _isChanged |= (_firstletter != value); _firstletter = value; RaisePropertyChanged("FirstLetter");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsContainDate
		{
			get { return _iscontaindate; }
            set { _isChanged |= (_iscontaindate != value); _iscontaindate = value;
                RaisePropertyChanged("IsContainDate"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long Length
		{
			get { return _length; }
            set { _isChanged |= (_length != value); _length = value; RaisePropertyChanged("Length"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string StartValue
		{
			get { return _startvalue; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for StartValue", value, value.ToString());

                _isChanged |= (_startvalue != value); _startvalue = value; RaisePropertyChanged("StartValue"); 
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CurrentValue
		{
			get { return _currentvalue; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CurrentValue", value, value.ToString());

                _isChanged |= (_currentvalue != value); _currentvalue = value; RaisePropertyChanged("CurrentValue");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());

                _isChanged |= (_createuser != value); _createuser = value; RaisePropertyChanged("CreateUser");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
            set { _isChanged |= (_createtime != value); _createtime = value; RaisePropertyChanged("CreateTime"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());

                _isChanged |= (_upduser != value); _upduser = value; RaisePropertyChanged("UpdUser"); 
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
            set { _isChanged |= (_updtime != value); _updtime = value; RaisePropertyChanged("UpdTime"); }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
