/*
insert license info here
*/
using System;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class MarketManage
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _id; 
		private string _marketno; 
		private string _marketname; 
		private string _starttime; 
		private string _endtime; 
		private string _dataownerday; 
		private long _isenble; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public MarketManage()
		{
			_id = 0; 
			_marketno = null; 
			_marketname = null; 
			_starttime = null; 
			_endtime = null; 
			_dataownerday = null; 
			_isenble = 0; 
			_createuser = null; 
			_createtime = new DateTime(); 
			_upduser = null; 
			_updtime = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long Id
		{
			get { return _id; }
			set { _isChanged |= (_id != value); _id = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MarketNo
		{
			get { return _marketno; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for MarketNo", value, value.ToString());
				
				_isChanged |= (_marketno != value); _marketno = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MarketName
		{
			get { return _marketname; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for MarketName", value, value.ToString());
				
				_isChanged |= (_marketname != value); _marketname = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string StartTime
		{
			get { return _starttime; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for StartTime", value, value.ToString());
				
				_isChanged |= (_starttime != value); _starttime = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string EndTime
		{
			get { return _endtime; }
			set	
			{
				if( value!= null && value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for EndTime", value, value.ToString());
				
				_isChanged |= (_endtime != value); _endtime = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DataOwnerDay
		{
			get { return _dataownerday; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for DataOwnerDay", value, value.ToString());
				
				_isChanged |= (_dataownerday != value); _dataownerday = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsEnble
		{
			get { return _isenble; }
			set { _isChanged |= (_isenble != value); _isenble = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());
				
				_isChanged |= (_createuser != value); _createuser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
			set { _isChanged |= (_createtime != value); _createtime = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());
				
				_isChanged |= (_upduser != value); _upduser = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
			set { _isChanged |= (_updtime != value); _updtime = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
