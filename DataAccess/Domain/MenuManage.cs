/*
insert license info here
*/
using System;
using Microsoft.Practices.Prism.ViewModel;

namespace DataAccess.Domain
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class MenuManage:NotificationObject
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private long _id; 
		private string _menuno; 
		private string _menuname; 
		private string _menutype; 
		private string _bigtype; 
		private string _middletype; 
		private string _smalltype; 
		private float _saleprice; 
		private float _cost; 
		private string _saleunit; 
		private string _helpremembercode; 
		private string _twodimensionalcode; 
		private string _barcode; 
		private string _set1; 
		private string _set1value; 
		private string _set2; 
		private string _set2value; 
		private string _set3; 
		private string _set3value; 
		private string _set4; 
		private string _set4value; 
		private long _ishot; 
		private string _hotlevel; 
		private string _menustyle; 
		private string _menucharacteristic; 
		private string _dishtype; 
		private byte[] _image; 
		private long _isvalidate; 
		private string _createuser; 
		private DateTime _createtime; 
		private string _upduser; 
		private DateTime _updtime; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public MenuManage()
		{
			_id = 0; 
			_menuno = null; 
			_menuname = null; 
			_menutype = null; 
			_bigtype = null; 
			_middletype = null; 
			_smalltype = null; 
			_saleprice = 0; 
			_cost = 0; 
			_saleunit = null; 
			_helpremembercode = null; 
			_twodimensionalcode = null; 
			_barcode = null; 
			_set1 = null; 
			_set1value = null; 
			_set2 = null; 
			_set2value = null; 
			_set3 = null; 
			_set3value = null; 
			_set4 = null; 
			_set4value = null; 
			_ishot = 0; 
			_hotlevel = null; 
			_menustyle = null; 
			_menucharacteristic = null; 
			_dishtype = null; 
			_image = new byte[]{}; 
			_isvalidate = 0; 
			_createuser = null; 
			_createtime = new DateTime(); 
			_upduser = null; 
			_updtime = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public long Id
		{
			get { return _id; }
            set { _isChanged |= (_id != value); _id = value; RaisePropertyChanged("Id"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MenuNo
		{
			get { return _menuno; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for MenuNo", value, value.ToString());

                _isChanged |= (_menuno != value); _menuno = value; RaisePropertyChanged("MenuNo");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MenuName
		{
			get { return _menuname; }
			set	
			{
				if( value!= null && value.Length > 15)
					throw new ArgumentOutOfRangeException("Invalid value for MenuName", value, value.ToString());

                _isChanged |= (_menuname != value); _menuname = value; RaisePropertyChanged("MenuName");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MenuType
		{
			get { return _menutype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for MenuType", value, value.ToString());

                _isChanged |= (_menutype != value); _menutype = value; RaisePropertyChanged("MenuType");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BigType
		{
			get { return _bigtype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for BigType", value, value.ToString());

                _isChanged |= (_bigtype != value); _bigtype = value; RaisePropertyChanged("BigType");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MiddleType
		{
			get { return _middletype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for MiddleType", value, value.ToString());

                _isChanged |= (_middletype != value); _middletype = value; RaisePropertyChanged("MiddleType");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SmallType
		{
			get { return _smalltype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for SmallType", value, value.ToString());

                _isChanged |= (_smalltype != value); _smalltype = value; RaisePropertyChanged("SmallType");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float SalePrice
		{
			get { return _saleprice; }
            set { _isChanged |= (_saleprice != value); _saleprice = value; RaisePropertyChanged("SalePrice"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public float Cost
		{
			get { return _cost; }
            set { _isChanged |= (_cost != value); _cost = value; RaisePropertyChanged("Cost"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string SaleUnit
		{
			get { return _saleunit; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for SaleUnit", value, value.ToString());

                _isChanged |= (_saleunit != value); _saleunit = value; RaisePropertyChanged("SaleUnit");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string HelpRememberCode
		{
			get { return _helpremembercode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for HelpRememberCode", value, value.ToString());

                _isChanged |= (_helpremembercode != value); _helpremembercode = value; RaisePropertyChanged("HelpRememberCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string TwoDimensionalCode
		{
			get { return _twodimensionalcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for TwoDimensionalCode", value, value.ToString());

                _isChanged |= (_twodimensionalcode != value); _twodimensionalcode = value; RaisePropertyChanged("TwoDimensionalCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string BarCode
		{
			get { return _barcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for BarCode", value, value.ToString());

                _isChanged |= (_barcode != value); _barcode = value; RaisePropertyChanged("BarCode");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set1
		{
			get { return _set1; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set1", value, value.ToString());

                _isChanged |= (_set1 != value); _set1 = value; RaisePropertyChanged("Set1");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set1Value
		{
			get { return _set1value; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set1Value", value, value.ToString());

                _isChanged |= (_set1value != value); _set1value = value; RaisePropertyChanged("Set1Value");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set2
		{
			get { return _set2; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set2", value, value.ToString());

                _isChanged |= (_set2 != value); _set2 = value; RaisePropertyChanged("Set2");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set2Value
		{
			get { return _set2value; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set2Value", value, value.ToString());

                _isChanged |= (_set2value != value); _set2value = value; RaisePropertyChanged("Set2Value");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set3
		{
			get { return _set3; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set3", value, value.ToString());

                _isChanged |= (_set3 != value); _set3 = value; RaisePropertyChanged("Set3");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set3Value
		{
			get { return _set3value; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set3Value", value, value.ToString());

                _isChanged |= (_set3value != value); _set3value = value; RaisePropertyChanged("Set3Value");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set4
		{
			get { return _set4; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set4", value, value.ToString());

                _isChanged |= (_set4 != value); _set4 = value; RaisePropertyChanged("Set4");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string Set4Value
		{
			get { return _set4value; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Set4Value", value, value.ToString());

                _isChanged |= (_set4value != value); _set4value = value; RaisePropertyChanged("Set4Value");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsHot
		{
			get { return _ishot; }
            set { _isChanged |= (_ishot != value); _ishot = value; RaisePropertyChanged("IsHot"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string HotLevel
		{
			get { return _hotlevel; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for HotLevel", value, value.ToString());

                _isChanged |= (_hotlevel != value); _hotlevel = value; RaisePropertyChanged("HotLevel");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MenuStyle
		{
			get { return _menustyle; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for MenuStyle", value, value.ToString());

                _isChanged |= (_menustyle != value); _menustyle = value; RaisePropertyChanged("MenuStyle");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string MenuCharacteristic
		{
			get { return _menucharacteristic; }
			set	
			{
				if( value!= null && value.Length >20)
					throw new ArgumentOutOfRangeException("Invalid value for MenuCharacteristic", value, value.ToString());

                _isChanged |= (_menucharacteristic != value); _menucharacteristic = value; RaisePropertyChanged("MenuCharacteristic");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string DishType
		{
			get { return _dishtype; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for DishType", value, value.ToString());

                _isChanged |= (_dishtype != value); _dishtype = value; RaisePropertyChanged("DishType");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public byte[] Image
		{
			get { return _image; }
            set { _isChanged |= (_image != value); _image = value; RaisePropertyChanged("Image"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public long IsValidate
		{
			get { return _isvalidate; }
            set { _isChanged |= (_isvalidate != value); _isvalidate = value; RaisePropertyChanged("IsValidate"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string CreateUser
		{
			get { return _createuser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for CreateUser", value, value.ToString());

                _isChanged |= (_createuser != value); _createuser = value; RaisePropertyChanged("CreateUser");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime CreateTime
		{
			get { return _createtime; }
            set { _isChanged |= (_createtime != value); _createtime = value; RaisePropertyChanged("CreateTime"); }
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public string UpdUser
		{
			get { return _upduser; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for UpdUser", value, value.ToString());

                _isChanged |= (_upduser != value); _upduser = value; RaisePropertyChanged("UpdUser");
			}
		}
			
		/// <summary>
		/// 
		/// </summary>		
		public DateTime UpdTime
		{
			get { return _updtime; }
            set { _isChanged |= (_updtime != value); _updtime = value; RaisePropertyChanged("UpdTime"); }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
